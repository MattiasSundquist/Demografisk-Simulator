# app.py

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# Importera de nya, modul√§ra komponenterna
from utils.parameters import get_default_parameters
from utils.data_loader import load_scb_data
from simulation.population import Population
from simulation.engine import SimulationEngine

# --- SIDANS GRUNDINST√ÑLLNINGAR OCH TITEL ---
st.set_page_config(page_title="Demografisk Simulator 5.0", layout="wide")

# --- MODELLKONSTANTER (endast de som beh√∂vs f√∂r initialisering) ---
START_YEAR = 1960

# --- INITIERA SESSION STATE ---
if 'edited_params' not in st.session_state:
    st.session_state['edited_params'] = get_default_parameters()

if 'future_migration_composition' not in st.session_state:
    st.session_state['future_migration_composition'] = st.session_state['edited_params']["migration"]["historical_waves"]["2001-2024"].copy()

if 'forecast_settings' not in st.session_state:
    st.session_state['forecast_settings'] = {
        'forecast_end_year': 2070, 'tfr': 1.59, 'target_le_male': 85.3, 'target_le_female': 87.7,
        'cdr_target_2050': 8.8, 'immigrant_composition': st.session_state['future_migration_composition'],
        'migration_model': 'Procent av befolkningen',
        'annual_immigrants': 80000, 'annual_emigrants': 60000,
        'immigration_rate': 0.0075, 'emigration_rate': 0.0057
    }

# --- HJ√ÑLPFUNKTION F√ñR ATT SKAPA STARTPOPULATION ---
def create_initial_population(scb_data, scale_factor):
    """Skapar den initiala populationen f√∂r simuleringen baserat p√• 1960 √•rs data."""
    total_pop_real = scb_data.loc[START_YEAR, "Folkm√§ngd 31 december Population on 31 December"]
    num_agents = int(total_pop_real / scale_factor)
    
    ages = np.arange(100)
    dist = np.exp(-ages * 0.03)
    dist /= dist.sum()
    agent_ages = np.random.choice(ages, size=num_agents, p=dist)
    
    population_df = pd.DataFrame({
        'id': range(num_agents),
        'age': agent_ages, 
        'sex': np.random.choice([0, 1], size=num_agents), 
        'is_alive': True, 
        'swedish_share': 1.0, 
        'ethnic_origin': 'Svensk', 
        'parent1_id': -1, 
        'parent2_id': -1, 
        'is_immigrant': False,
        'birth_year': START_YEAR - agent_ages
    })
    return population_df

# --- HUVUDPROGRAM & ANV√ÑNDARGR√ÑNSSNITT ---
st.title("üá∏üá™ Demografisk Simulator: Kulturell Dynamik (v5.0)")
st.sidebar.header("K√§rnparametrar")
scale_factor = st.sidebar.slider(
    "Simuleringens Skalningsfaktor (1:X)", 10, 1000, 1000, 10,
    help="Best√§mmer uppl√∂sningen p√• simuleringen. En l√§gre siffra ger en mer detaljerad (men l√•ngsammare) simulering. Exempel: Vid 1000 representerar 1 'agent' 1000 verkliga personer. Standard √§r 1000."
)

tab1, tab2, tab3, tab4, tab5 = st.tabs(["Resultat", "Parametrar", "Framtidsscenarier", "Agent-utforskaren", "Om Modellen"])

UI_LABELS = {
    "Swedish_Background": "Svensk bakgrund", "First_Generation": "F√∂rsta generationen",
    "Later_Generations": "Senare generationer", "Simulated_Population": "Simulerad befolkning",
    "Actual_Population_SCB": "Verklig befolkning (SCB)", "Simulated_Births": "Simulerade f√∂dslar",
    "Actual_Births_SCB": "Verkliga f√∂dslar (SCB)"
}

with tab1:
    st.header("K√∂r Simulering & Analysera Resultat")
    params_to_run = st.session_state['edited_params']
    forecast_settings_to_run = st.session_state['forecast_settings']
    final_end_year = forecast_settings_to_run['forecast_end_year']
    
    if st.button(f"K√ñR SIMULERING (Skala 1:{scale_factor}, till √•r {final_end_year})", use_container_width=True, type="primary"):
        # --- ORKESTRERING AV SIMULERINGEN ---
        # 1. Ladda och f√∂rbered data
        scb_data = load_scb_data('SCB Raw Data.csv', final_end_year)
        
        # 2. Skapa startpopulationen
        initial_pop_df = create_initial_population(scb_data, scale_factor)
        population_object = Population(initial_pop_df)
        
        # 3. Initiera simuleringsmotorn
        engine = SimulationEngine(
            population=population_object,
            scb_data=scb_data,
            params=params_to_run,
            forecast_settings=forecast_settings_to_run,
            scale_factor=scale_factor
        )
        
        # 4. K√∂r simuleringen och h√§mta resultat
        summary_df, final_pop_df, event_df = engine.run_simulation()
        
        # 5. Spara resultaten i session state
        st.session_state.update({
            'results_summary': summary_df, 
            'results_population': final_pop_df, 
            'results_events': event_df
        })
    
    if 'results_summary' in st.session_state:
        results = st.session_state['results_summary']
        st.success("Simuleringen √§r klar!", icon="‚úÖ")
        st.subheader("Resultat")
        scale_results = st.checkbox("Visa resultat i verklig skala", value=True)
        
        display_df = results.copy()
        if scale_results:
            cols_to_scale = ['Simulated_Population', 'Swedish_Background', 'Later_Generations', 'First_Generation', 'Simulated_Births']
            for col in cols_to_scale: 
                display_df[col] = pd.to_numeric(display_df[col], errors='coerce').multiply(scale_factor)
        
        st.info(f"Data efter {params_to_run['simulation']['end_year']} bygger p√• prognosantaganden.")
        st.subheader("Befolkningsutveckling per bakgrund")
        c1, c2 = st.columns([1,1])
        
        default_groups_code = ["Swedish_Background", "Later_Generations", "First_Generation"]
        options_for_multiselect = {code: label for code, label in UI_LABELS.items() if code in default_groups_code}
        selected_groups_code = c1.multiselect("V√§lj grupper att visa:", options=options_for_multiselect.keys(), default=default_groups_code, format_func=lambda code: options_for_multiselect[code])
        
        combine_groups = c2.checkbox("Sl√• ihop grupper med utl√§ndsk bakgrund")
        plot_df = display_df.copy().rename(columns=UI_LABELS)
        
        if combine_groups:
            plot_df["Utl√§ndsk bakgrund (totalt)"] = plot_df[UI_LABELS["First_Generation"]].fillna(0) + plot_df[UI_LABELS["Later_Generations"]].fillna(0)
            groups_to_plot_labels = [UI_LABELS[g] for g in selected_groups_code if g not in ["First_Generation", "Later_Generations"]] + ["Utl√§ndsk bakgrund (totalt)"]
        else: 
            groups_to_plot_labels = [UI_LABELS[g] for g in selected_groups_code]
        
        fig_groups = px.line(plot_df, y=groups_to_plot_labels, labels={"value": "Antal Personer", "variable": "Befolkningsgrupp"})
        fig_groups.add_vline(x=params_to_run['simulation']['end_year'], line_width=2, line_dash="dash", line_color="red", annotation_text="Prognosstart", annotation_position="top left")
        st.plotly_chart(fig_groups, use_container_width=True)
        
        with st.expander("Visa valideringsgrafer"):
            val_df = plot_df
            fig_pop = px.line(val_df, y=[UI_LABELS['Simulated_Population'], UI_LABELS['Actual_Population_SCB']], title="Total Befolkning (Simulerad vs. Verklig)")
            fig_pop.add_vline(x=params_to_run['simulation']['end_year'], line_width=2, line_dash="dash", line_color="red")
            st.plotly_chart(fig_pop, use_container_width=True)
            fig_births = px.line(val_df, y=[UI_LABELS['Simulated_Births'], UI_LABELS['Actual_Births_SCB']], title="Antal F√∂dda (Simulerat vs. Verkligt)")
            fig_births.add_vline(x=params_to_run['simulation']['end_year'], line_width=2, line_dash="dash", line_color="red")
            st.plotly_chart(fig_births, use_container_width=True)
        
        with st.expander("Visa Detaljerad Simuleringslogg"): 
            st.dataframe(display_df.rename(columns=UI_LABELS).style.format("{:,.0f}", na_rep='-'), use_container_width=True)

with tab2:
    st.header("Modellparametrar")
    st.info("H√§r kan du finjustera modellens grundantaganden. Standardv√§rdena √§r baserade p√• officiell statistik och vedertagna demografiska principer d√§r det √§r m√∂jligt.") 
    p = st.session_state['edited_params']
    
    with st.expander("Assimilering & Social Dynamik", expanded=True):
        p['assimilation']['base_rate'] = st.slider(
            "Maximal Assimilationstakt (% per √•r)", 0.0, 2.0, p['assimilation']['base_rate'] * 100, 0.1,
            help="**Detta √§r ett grundantagande i modellen och har ingen direkt statistisk k√§lla.**\n\nDetta v√§rde representerar den teoretiska maxhastigheten f√∂r assimilering under de mest gynnsamma f√∂rh√•llandena (dvs. n√§r 100% av befolkningen har svensk bakgrund).\n\nDen **faktiska** assimilationstakten varje √•r √§r en produkt av detta v√§rde, den dynamiska styrkan (nedan), och ursprungsspecifika multiplikatorer."
        ) / 100.0
        
        st.markdown("---")
        st.subheader("Assimileringens Dynamik")
        p['assimilation']['strength_multiplier'] = st.slider(
            "Styrka p√• assimilationsdynamik", 0.0, 3.0, p['assimilation']['strength_multiplier'], 0.1,
            help="Styr den √∂vergripande kraften i den dynamiska assimilationsmodellen.\n\nModellen √§r designad s√• att assimilationsprocessen naturligt stannar av n√§r andelen av befolkningen med 'svensk bakgrund' √§r 50%. Denna parameter skalar hur starkt assimileringen driver mot 100% (n√§r andelen √§r >50%) eller mot 0% (n√§r andelen √§r <50%).\n\n- **1.0 (Standard):** Modellen k√∂rs med standardantagandet.\n- **> 1.0:** Simulerar ett samh√§lle med starkare sociala krafter (snabbare assimilering/de-assimilering).\n- **< 1.0:** Simulerar ett samh√§lle d√§r sociala processer √§r tr√∂gare.\n- **0.0:** St√§nger helt av den dynamiska mekanismen."
        )

        st.markdown("---")
        st.subheader("Utvandringsben√§genhet")
        p['migration']['emigration_bias'] = st.slider(
            "Multiplikator f√∂r utvandring (utl√§ndsk bakgrund)", 1.0, 15.0, p['migration']['emigration_bias'], 0.5,
            help="Styr hur mycket mer sannolikt det √§r att en person med 0% svenskandel utvandrar j√§mf√∂rt med en med 100%.\n\n**Relation:** En persons utvandringssannolikhet ber√§knas som `1 + (1 - swedish_share) * (Multiplikator - 1)`.\n\n**K√§lla:** Standardv√§rdet √§r en modellkalibrering, men principen baseras p√• SCB-statistik som visar att utrikes f√∂dda har en betydligt h√∂gre ben√§genhet att utvandra. F√∂r att hitta denna typ av data, s√∂k p√• 'Utrikes f√∂ddas √•terutvandring' p√• scb.se."
        )
        
        st.markdown("---")
        st.subheader("Blandrelationer")
        st.markdown("H√§r st√§lls sannolikheten f√∂r att en mor hittar en partner **utanf√∂r** sin egen bakgrundsgrupp. V√§rdena interpoleras linj√§rt mellan start- och slut√•r.")
        c1, c2 = st.columns(2)
        p['mixing']['swedish_background_mother']['start_value'] = c1.slider(
            "Mor med svensk bakgrund, 1960 (%)", 0.0, 50.0, p['mixing']['swedish_background_mother']['start_value'] * 100, 1.0,
            help="Sannolikheten att en mor med 100% svenskandel f√•r barn med en far som har <100% svenskandel. **K√§lla:** V√§rdena √§r modellkalibreringar baserade p√• den observerade √∂kningen av barn med en inrikes och en utrikes f√∂dd f√∂r√§lder. F√∂r att hitta denna typ av data, s√∂k p√• 'Familjeliv i Sverige' p√• scb.se."
        ) / 100.0
        p['mixing']['swedish_background_mother']['end_value'] = c2.slider("Mor med svensk bakgrund, 2019 (%)", 0.0, 50.0, p['mixing']['swedish_background_mother']['end_value'] * 100, 1.0) / 100.0
        c3, c4 = st.columns(2)
        p['mixing']['foreign_background_mother']['start_value'] = c3.slider(
            "Mor med utl√§ndsk bakgrund, 1960 (%)", 0.0, 50.0, p['mixing']['foreign_background_mother']['start_value'] * 100, 1.0,
            help="Sannolikheten att en mor med <100% svenskandel f√•r barn med en far som har 100% svenskandel."
        ) / 100.0
        p['mixing']['foreign_background_mother']['end_value'] = c4.slider("Mor med utl√§ndsk bakgrund, 2019 (%)", 0.0, 50.0, p['mixing']['foreign_background_mother']['end_value'] * 100, 1.0) / 100.0
        
    with st.expander("Parametrar per Ursprungsgrupp"):
        st.subheader("Initial 'svenskandel' vid ankomst")
        st.markdown("Detta √§r ett **modellantagande** som representerar en nyanl√§nd immigrants initiala kulturella och sociala n√§rhet till det svenska samh√§llet.")
        c1, c2, c3, c4, c5 = st.columns(5)
        cols = [c1, c2, c3, c4, c5]
        origins = list(p['assimilation']['start_shares'].keys())
        for i, origin in enumerate(origins):
            p['assimilation']['start_shares'][origin] = cols[i].slider(f"{origin} (%)", 0.0, 100.0, p['assimilation']['start_shares'][origin] * 100, 1.0, key=f"start_{origin}") / 100.0

        st.markdown("---")
        st.subheader("Relativ Assimileringstakt (Multiplikator)")
        st.markdown("Detta √§r ett **modellantagande** som reflekterar hur snabbt olika grupper antas assimilera sig, relativt till varandra, baserat p√• faktorer som kulturellt och spr√•kligt avst√•nd.")
        c1, c2, c3, c4, c5 = st.columns(5)
        cols = [c1, c2, c3, c4, c5]
        origins = list(p['assimilation']['rate_multipliers'].keys())
        for i, origin in enumerate(origins):
            p['assimilation']['rate_multipliers'][origin] = cols[i].slider(f"{origin}", 0.0, 10.0, p['assimilation']['rate_multipliers'][origin], 0.5, key=f"rate_{origin}")
        
    with st.expander("Fertilitetsbonus per Ursprungsgrupp"):
        st.markdown("H√§r anges en fertilitetsbonus relativt till gruppen med svensk bakgrund. V√§rdet √§r en multiplikator p√• den del av f√∂dselpotentialen som inte √§r kopplad till 'svenskandel'.")
        for origin, bonus in p['fertility']['bonuses'].items():
            if origin != "Svensk": 
                p['fertility']['bonuses'][origin] = st.slider(
                    origin, 0.0, 2.0, bonus, 0.1, key=f"fert_{origin}",
                    help=f"**K√§lla:** Standardv√§rdena √§r kalibrerade f√∂r att spegla observerade skillnader i summerad fruktsamhet (TFR) mellan inrikes f√∂dda och utrikes f√∂dda fr√•n olika regioner. F√∂r att hitta denna data, s√∂k p√• 'Befolkningsframskrivning' p√• scb.se och leta efter tabeller om fruktsamhet f√∂r inrikes/utrikes f√∂dda."
                )
            
    with st.expander("Historisk Invandrarsammans√§ttning"):
        st.markdown("F√∂rdelningen av invandrare fr√•n olika ursprungsregioner under olika tidsperioder.")
        for period, wave in sorted(p['migration']['historical_waves'].items()):
            st.subheader(f"Period: {period}")
            st.markdown(f"**K√§lla:** Standardv√§rdena √§r approximeringar baserade p√• SCB:s data √∂ver invandring. F√∂r att hitta denna typ av data, s√∂k p√• 'Invandring och utvandring efter f√∂delseland' i Statistikdatabasen p√• scb.se. V√§rdena speglar de stora skiftena fr√•n arbetskraftsinvandring fr√•n Europa till flyktinginvandring.", help="Den totala summan f√∂r en period b√∂r vara 100%. Modellen normaliserar automatiskt v√§rdena om summan inte st√§mmer.")
            cols = st.columns(len(wave))
            for i, (origin, prob) in enumerate(wave.items()): 
                p['migration']['historical_waves'][period][origin] = cols[i].number_input(f"{origin} (%)", 0.0, 100.0, prob * 100, 5.0, key=f"{period}_{origin}") / 100.0
    
    st.session_state['edited_params'] = p

with tab3:
    st.header("Framtidsscenarier")
    st.info("H√§r definierar du antaganden f√∂r modellens prognosperiod (fr√•n 2025 och fram√•t). Standardv√§rdena √§r satta f√∂r att spegla SCB:s senaste huvudscenario f√∂r Sveriges framtida befolkning.")
    settings = st.session_state['forecast_settings'] 

    st.subheader("Simuleringshorisont")
    settings['forecast_end_year'] = st.slider("Prognosens Slut√•r", 2025, 2200, settings['forecast_end_year'], 5)

    st.subheader("Framtida Fruktsamhet")
    settings['tfr'] = st.slider(
        "Summerad Fruktsamhet (TFR)", 1.0, 2.5, settings.get('tfr', 1.59), 0.01,
        help="Genomsnittligt antal barn en kvinna f√∂rv√§ntas f√∂da under sin livstid. **Standardv√§rdet (1.59)** √§r SCB:s l√•ngsiktiga antagande i deras senaste befolkningsprognos. F√∂r att hitta k√§llan, s√∂k p√• 'Befolkningsframskrivning 2024‚Äì2070' p√• scb.se."
    )

    st.subheader("Framtida D√∂dlighet")
    st.markdown("Modellen interpolerar linj√§rt mot dessa m√•lv√§rden fram till √•r 2050.")
    c1, c2, c3 = st.columns(3)
    settings['target_le_male'] = c1.slider(
        "M√•l: Livsl√§ngd M√§n (2050)", 75.0, 95.0, settings.get('target_le_male', 85.3), 0.1,
        help="F√∂rv√§ntad medellivsl√§ngd f√∂r m√§n √•r 2050. **Standardv√§rdet (85.3 √•r)** √§r SCB:s prognos. F√∂r att hitta k√§llan, s√∂k p√• 'Befolkningsframskrivning 2024‚Äì2070' p√• scb.se."
    )
    settings['target_le_female'] = c2.slider(
        "M√•l: Livsl√§ngd Kvinnor (2050)", 80.0, 100.0, settings.get('target_le_female', 87.7), 0.1,
        help="F√∂rv√§ntad medellivsl√§ngd f√∂r kvinnor √•r 2050. **Standardv√§rdet (87.7 √•r)** √§r SCB:s prognos. F√∂r att hitta k√§llan, s√∂k p√• 'Befolkningsframskrivning 2024‚Äì2070' p√• scb.se."
    )
    settings['cdr_target_2050'] = c3.slider(
        "M√•l: D√∂dstal (CDR, per 1000 inv.)", 5.0, 15.0, settings['cdr_target_2050'], 0.1,
        help="R√•tt d√∂dstal (Crude Death Rate). Detta v√§rde p√•verkas av befolkningens √•ldersstruktur. Standardv√§rdet √§r en kalibrering som samspelar med den √∂kande livsl√§ngden och en √•ldrande befolkning."
    )

    st.subheader("Framtida Migration")
    st.markdown("Detta √§r en av de mest os√§kra faktorerna i en befolkningsprognos. Standardv√§rdena baseras p√• ett genomsnitt av de senaste √•rens utfall, men kan justeras f√∂r att testa olika scenarier.")
    migration_model_options = ('Absoluta tal', 'Procent av befolkningen')
    current_model_index = migration_model_options.index(settings.get('migration_model', 'Procent av befolkningen'))
    
    settings['migration_model'] = st.radio("V√§lj migrationsmodell f√∂r prognosen:", migration_model_options, index=current_model_index)
    
    c1, c2 = st.columns(2)
    if settings['migration_model'] == 'Absoluta tal':
        settings['annual_immigrants'] = c1.slider("√Örlig Invandring (antal)", 0, 150000, settings['annual_immigrants'], 5000)
        settings['annual_emigrants'] = c2.slider("√Örlig Utvandring (antal)", 0, 100000, settings['annual_emigrants'], 5000)
    else:
        settings['immigration_rate'] = c1.slider("√Örlig Invandring (% av befolkningen)", 0.0, 2.0, settings.get('immigration_rate', 0.0075) * 100, 0.05) / 100.0
        settings['emigration_rate'] = c2.slider("√Örlig Utvandring (% av befolkningen)", 0.0, 2.0, settings.get('emigration_rate', 0.0057) * 100, 0.05) / 100.0
    
    st.markdown("---")
    st.subheader("Framtida Invandrarsammans√§ttning (fr√•n 2025)")
    st.markdown("Andelen invandrare fr√•n olika regioner. Detta √§r ett **scenariov√§rde** som du kan justera. Standard √§r att forts√§tta med samma f√∂rdelning som under den senaste historiska perioden (2001-2024).")
    cols = st.columns(len(st.session_state['future_migration_composition']))
    for i, (origin, prob) in enumerate(st.session_state['future_migration_composition'].items()):
        st.session_state['future_migration_composition'][origin] = cols[i].number_input(
            f"{origin} (%)", 0.0, 100.0, st.session_state['future_migration_composition'][origin] * 100, 5.0,
            key=f"future_mig_comp_{origin}"
        ) / 100.0

    current_sum = sum(st.session_state['future_migration_composition'].values())
    if not np.isclose(current_sum, 1.0, atol=0.01):
        st.warning(f"Varning: Invandrarsammans√§ttningen summerar till {current_sum*100:.0f}%. Justera f√∂r att f√• 100%.")

    settings['immigrant_composition'] = st.session_state['future_migration_composition']
    st.session_state['forecast_settings'] = settings

with tab4:
    st.header("Agent-utforskaren")
    if 'results_population' not in st.session_state: st.info("K√∂r en simulering p√• f√∂rsta fliken f√∂r att ladda agentdata.")
    else:
        population_df = st.session_state['results_population']
        with st.expander("S√∂k & Filtrera Agenter", expanded=True):
            c1, c2, c3 = st.columns(3)
            unique_origins = list(population_df['ethnic_origin'].unique())
            origin_filter = c1.selectbox("Filtrera p√• Ursprung:", options=['Alla'] + sorted(unique_origins)) 
            max_age_possible = int(population_df['age'].max()) if not population_df.empty else 120
            age_filter = c2.slider(f"Filtrera p√• Slut√•lder ({st.session_state['forecast_settings']['forecast_end_year']}):", -1, max_age_possible, (-1, max_age_possible))
            share_filter = c3.slider("Filtrera p√• Slutgiltig 'svenskandel' (%):", 0, 100, (0, 100))
            
            filtered_df = population_df.copy()
            if origin_filter != 'Alla': filtered_df = filtered_df[filtered_df['ethnic_origin'] == origin_filter]
            if age_filter[0] > -1: filtered_df = filtered_df[filtered_df['age'] >= age_filter[0]]
            if age_filter[1] < max_age_possible: filtered_df = filtered_df[filtered_df['age'] <= age_filter[1]]
            filtered_df = filtered_df[(filtered_df['swedish_share'] * 100 >= share_filter[0]) & (filtered_df['swedish_share'] * 100 <= share_filter[1])]
            
            st.write(f"Hittade {len(filtered_df)} agenter som matchar dina filter.")
            st.dataframe(filtered_df.head(1000).style.format({'swedish_share': '{:.2%}'}))

with tab5:
    st.header("S√• fungerar modellen")
    st.markdown("""
    Detta verktyg √§r en **agentbaserad demografisk simulator** f√∂r Sverige. Det betyder att den skapar en digital miniatyrbefolkning av individer ("agenter") och simulerar deras livs√∂den √•r f√∂r √•r, fr√•n 1960 och in i framtiden.
    
    K√§rnan i modellen √§r att sp√•ra och simulera **kulturell dynamik**. Detta g√∂rs genom att varje person i simuleringen har en grad av social och kulturell tillh√∂righet till den svenska majoritetskulturen. Detta g√∂r det m√∂jligt att utforska hur befolkningens sammans√§ttning kan f√∂r√§ndras √∂ver tid, baserat p√• en kombination av historisk data och dina egna antaganden om framtiden.
    
    Nedan f√∂ljer en f√∂rklaring av modellen p√• tre olika niv√•er av detalj.
    """)

    with st.expander("Abstraktniv√• 1: H√∂g (Koncis √∂versikt)", expanded=True):
        st.markdown("""
        Detta verktyg simulerar hur Sveriges befolkning och dess kulturella sammans√§ttning utvecklas. Det b√∂rjar med verkliga siffror fr√•n Statistiska centralbyr√•n (SCB) f√∂r √•r 1960 och f√∂ljer den historiska utvecklingen fram till idag. D√§refter skapar den en prognos f√∂r framtiden baserat p√• de antaganden du st√§ller in.

        Varje person i simuleringen √§r en digital figur med egenskaper som √•lder, k√∂n och kulturell bakgrund. Modellen ber√§knar √•r f√∂r √•r hur dessa digitala personer √•ldras, f√•r barn, flyttar och hur deras kulturella tillh√∂righet f√∂r√§ndras √∂ver tid.

        Du kan √§ndra p√• antaganden om framtida barnaf√∂dande, migration och hur snabbt integrationen g√•r f√∂r att testa olika "t√§nk om"-scenarier. Resultaten hj√§lper till att visualisera de l√•ngsiktiga effekterna av olika demografiska trender.
        """)

    with st.expander("Abstraktniv√• 2: Medel (Balanserad f√∂rklaring)", expanded=False):
        st.markdown("""
        Simulatorn bygger p√• en population av digitala individer. Varje individ har en central egenskap: en grad av **kulturell tillh√∂righet** till den svenska majoritetskulturen, ett v√§rde mellan 0% och 100%.

        **Viktigt antagande:** Eftersom detaljerad data saknas, utg√•r modellen fr√•n en f√∂renklad startpunkt d√§r hela Sveriges befolkning √•r 1960 antas ha 100% svensk kulturell tillh√∂righet.

        Modellen k√∂rs i en √•rlig cykel. F√∂r varje √•r sker f√∂ljande h√§ndelser i ordning:

        - **1. √Öldrande och Kulturell F√∂r√§ndring:** Alla individer blir ett √•r √§ldre. Samtidigt justeras deras kulturella tillh√∂righet baserat p√• den totala befolkningens sammans√§ttning. Processen √§r dynamisk:
            - I ett samh√§lle med en stor majoritet med svensk bakgrund, √§r den sociala "dragkraften" mot integration stark.
            - Om andelen med svensk bakgrund minskar och n√§rmar sig 50%, avstannar integrationsprocessen.
            - Om andelen understiger 50%, kan processen v√§nda, vilket representerar en starkare dragkraft mot minoritetskulturer.

        - **2. D√∂dsfall:** Individer riskerar att d√∂ baserat p√• sin √•lder. F√∂r historiska √•r (1960-2024) styrs antalet d√∂dsfall exakt av SCB:s data. F√∂r framtiden anv√§nds dina prognoser om √∂kad medellivsl√§ngd.

        - **3. F√∂dslar:** Kvinnor i fertil √•lder kan f√• barn. Sannolikheten p√•verkas av deras ursprung och kulturella tillh√∂righet, f√∂r att matcha de observerade fertilitetsskillnaderna i befolkningen. Ett barn √§rver en blandning av sina f√∂r√§ldrars egenskaper.

        - **4. Migration:** Nya individer (invandrare) skapas och l√§ggs till i befolkningen, med en sammans√§ttning som f√∂ljer historiska migrationsv√•gor. Samtidigt tas individer bort f√∂r att representera utvandring, d√§r de med en l√§gre grad av svensk kulturell tillh√∂righet har en h√∂gre sannolikhet att l√§mna landet.
        """)

    with st.expander("Abstraktniv√• 3: L√•g (Detaljerad genomg√•ng)", expanded=False):
        st.markdown("""
        H√§r f√∂ljer en detaljerad konceptuell genomg√•ng av modellens komponenter och processer.

        ### 1. Startpunkt och Grundantaganden
        - **Data:** Modellen anv√§nder en tidsserie fr√•n SCB (1960-2024) med √•rlig data om total befolkning, f√∂dda, d√∂da, invandring och utvandring.
        - **Starttillst√•nd (1960):** Simuleringen b√∂rjar med en befolkning som matchar den verkliga storleken och √•ldersf√∂rdelningen f√∂r 1960. Ett centralt och f√∂renklande antagande g√∂rs h√§r: **alla individer i startpopulationen tilldelas 100% svensk kulturell tillh√∂righet.** Detta √§r en n√∂dv√§ndig f√∂renkling p√• grund av brist p√• detaljerad historisk data.

        ### 2. Den √Örliga Simuleringscykeln
        F√∂r varje √•r fr√•n 1960 till prognosens slut√•r utf√∂rs f√∂ljande steg:

        **A. √Öldrande & Kulturell F√∂r√§ndring**
        Alla levande individer blir ett √•r √§ldre. D√§refter sker den kulturella dynamiken f√∂r de individer som befinner sig i en integrationsprocess (varken 0% eller 100% tillh√∂righet):
        1.  **Analys av samh√§llsklimatet:** Modellen m√§ter andelen av den totala befolkningen som har en helt svensk bakgrund.
        2.  **Best√§mning av kulturell "dragkraft":** Baserat p√• denna andel best√§ms en social "dragkraft". Modellen anv√§nder en linj√§r skala:
            - Om 100% av befolkningen har svensk bakgrund, √§r den positiva kraften mot integration som starkast.
            - Om 50% har svensk bakgrund, √§r kraften neutral. Det r√•der en balans d√§r varken integration eller segregation dominerar.
            - Om 0% har svensk bakgrund, √§r den negativa kraften (de-assimilering) som starkast, vilket representerar en stark dragkraft mot andra kulturella normer.
        3.  **Individuell f√∂r√§ndring:** Den √•rliga f√∂r√§ndringen f√∂r en individs kulturella tillh√∂righet ber√§knas sedan baserat p√• denna "dragkraft", en inst√§llbar grundhastighet, och individens ursprungsregion.

        **B. D√∂dsfall**
        - **Historiska √•r (1960-2024):** En grundrisk att d√∂ baserat p√• √•lder justeras s√• att det totala antalet d√∂dsfall i simuleringen exakt matchar SCB:s officiella statistik f√∂r det √•ret.
        - **Prognos√•r (2025+):** Risken att d√∂ justeras dynamiskt f√∂r att gradvis uppn√• de m√•lv√§rden f√∂r medellivsl√§ngd som du st√§llt in.

        **C. F√∂dslar**
        1.  **F√∂dselpotential:** Kvinnor i fertil √•lder (15-49 √•r) f√•r en "f√∂dselpotential" som √§r h√∂gre om hon har ett ursprung med statistiskt h√∂gre fertilitet och l√§gre ju starkare hennes svenska kulturella tillh√∂righet √§r.
        2.  **Kalibrering:** Den totala potentialen i populationen justeras s√• att det f√∂rv√§ntade antalet f√∂dslar matchar antingen SCB:s historiska data eller din prognos f√∂r framtida barnaf√∂dande (TFR).
        3.  **Partner-val och arv:** F√∂r varje f√∂dsel v√§ljs en far, med en viss sannolikhet f√∂r parbildning √∂ver bakgrundsgr√§nserna. Barnet √§rver h√§lften av varje f√∂r√§ldrers kulturella tillh√∂righet och ett slumpm√§ssigt valt ursprung fr√•n en av dem.

        **D. Migration**
        - **Invandring:** Nya individer skapas. Deras antal styrs av SCB:s data (historiskt) eller dina prognosinst√§llningar (framtid). Deras √•lder och ursprungsregion slumpas enligt de f√∂rdelningar du st√§llt in. De tilldelas en initial kulturell tillh√∂righet baserat p√• sitt ursprung.
        - **Utvandring:** Individer tas bort fr√•n simuleringen. Antalet styrs p√• samma s√§tt. Urvalet av vilka som utvandrar √§r dock inte helt slumpm√§ssigt; individer med l√•g kulturell tillh√∂righet har en h√∂gre sannolikhet att l√§mna landet.

        ### 3. Trov√§rdighet
        Modellens styrka ligger i kombinationen av h√•rd data och flexibla antaganden.
        - **Historisk f√∂rankring:** Fram till idag √§r modellen inte en prognos, utan en **rekonstruktion** som √§r kalibrerad f√∂r att f√∂lja den verkliga utvecklingen enligt SCB.
        - **K√§llbaserade prognoser:** Standardinst√§llningarna f√∂r framtiden √§r inte godtyckliga, utan baseras p√• SCB:s officiella befolkningsframskrivning fr√•n 2024.
        - **Transparenta antaganden:** Parametrar som √§r rena modellantaganden √§r tydligt markerade som s√•dana, med f√∂rklaringar till logiken bakom dem.
        """)